package envelope

import "math"

type Shape func(input float64, duration float64) float64

func ShapeRound(input float64, duration float64) float64 {
	return math.Sin(math.Pi * input / duration)
}

func ShapeOscillate(input float64, duration float64) float64 {
	return math.Sin((math.Pi * input) / (duration / 4))
}

func ShapeOscillate8(input float64, duration float64) float64 {
	return math.Sin((math.Pi * input) / (duration / 8))
}

func ShapeOscillate16(input float64, duration float64) float64 {
	return math.Sin((math.Pi * input) / (duration / 16))
}
func ShapeOscillate32(input float64, duration float64) float64 {
	return math.Sin((math.Pi * input) / (duration / 32))
}

// WARNING: these following ones were generated by Copilot! Not all tested. some are probably useless.

func ShapeNone(input float64, duration float64) float64 {
	return 1
}
func ShapeLinear(input float64, duration float64) float64 {
	return input / duration
}
func ShapeExponential(input float64, duration float64) float64 {
	return math.Pow(2, input/duration)
}
func ShapeLogarithmic(input float64, duration float64) float64 {
	return math.Log(input/duration + 1)
}
func ShapeCosine(input float64, duration float64) float64 {
	return math.Cos(math.Pi * input / (2 * duration))
}

func ShapeDrop(input float64, duration float64) float64 {
	return math.Cos((math.Pi * input) / (2 * duration))
}
